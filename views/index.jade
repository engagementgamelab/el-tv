extends layout

block content
	img#logo(src="images/logo.png", style="display:none")

	//- .crossfade
	//- 	each image, index in data.images
	//- 		figure(style='background-image: url(https://res.cloudinary.com/engagement-lab-home/image/upload/c_scale,f_auto,w_1920,q_50/v10000/'+image.public_id+'); animation-delay: '+(8*index)+'s; animation-duration: '+(6*data.images.length)+'s')
	//- 		|   

	#video
		video(autoplay='', muted='')
			source(src=data, type='video/mp4')

	#chyron
		//- canvas#content(height=90)

	script.
		var canvas, ctx, img, totalTxtWidth, step, steps = 0, delay = 2;
		
		var txt = ['Sample', 'Sample 2'];
		var itemTxtWidth = [];
			var mesh, renderer, scene, camera, controls, textMesh, textGeo;
		
		function init() {

		  var socket = io( {
				reconnection: true,
				reconnectionDelay: 1000,
				reconnectionDelayMax : 5000,
				reconnectionAttempts: 99999
			});
		  // Refresh when new data posted
			socket.on('refresh', function(msg){
				window.location.reload(1);
			});

			runText();
		
		}

		function runText() {

			// renderer
			renderer = new THREE.WebGLRenderer();
			renderer.setSize( window.innerWidth, 90 );
			document.getElementById('chyron').appendChild( renderer.domElement );

			// scene
			scene = new THREE.Scene();

			let width = window.innerWidth;
			let height = 90;
			camera = new THREE.OrthographicCamera(window.innerWidth / -50, window.innerWidth / 50, 90 / 50, 90 / -50, -500, 1000);

			var loader = new THREE.FontLoader();
			loader.load('https://res.cloudinary.com/engagement-lab-home/raw/upload/v1570825523/el-tv/Open_Sans_Semibold_Regular.json', (font) => {

				textGeo = new THREE.TextGeometry('Hello three.js!', {
					font: font,
					size: 1,
					height: 0
				});

				var textMaterial = new THREE.LineBasicMaterial({
					color: 0xffffff,
					side: THREE.DoubleSide
				});

				textMesh = new THREE.Mesh(textGeo, textMaterial);
				textGeo.computeBoundingBox();
				textMesh.position.set(150, 0, 0)
				scene.add(textMesh);

				box = new THREE.Box3().setFromObject(textMesh);

				scene.updateMatrixWorld(true);
				animate();
			});

		}

		function animate() {

			requestAnimationFrame(animate);

			if (textMesh) {

				textMesh.translateX(-.06);
				var frustum = new THREE.Frustum();
				var cameraViewProjectionMatrix = new THREE.Matrix4();

				// every time the camera or objects change position (or every frame)

				camera.updateMatrixWorld(); // make sure the camera matrix is updated
				camera.matrixWorldInverse.getInverse(camera.matrixWorld);
				cameraViewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);
				frustum.setFromMatrix(cameraViewProjectionMatrix);
				let outBounds = !frustum.intersectsObject(textMesh);
				if (outBounds) {
					// console.log(textMesh.position)
					textMesh.position.set(0, 0, 0)
				}
			}
			renderer.render(scene, camera);

		}

		window.onload = function() { init(); };